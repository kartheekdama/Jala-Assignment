TABLE SALESPEOPLE 

SNUM 		SNAME              	CITY               	COMM
1001 		Peel                London            	.12
1002 		Serres            	San Jose            .13
1004 		Motika             	London             	.11
1007 		Rafkin             	Barcelona         	.15
1003 		Axelrod            	New york           	.1


TABLE CUST

 	CNUM 		CNAME      	CITY          	RATING      	SNUM
 2001 		Hoffman    	London           	100      		1001
 2002 		Giovanne   	Rome             	200      		1003
 2003 		Liu        	San Jose         	300      		1002
 2004 		Grass      	Brelin           	100      		1002
 2006	  	Clemens    	London           	300      		1007
 2007 		Pereira    	Rome             	100      		1004
	

ORDERS

ONUM	   AMT		      ODATE        	CNUM          SNUM
3001    18.69 		  03-OCT-94      	2008      		1007
3003    767.19 		  03-OCT-94      	2001      		1001
3002    1900.10 		03-OCT-94      	2007      		1004
3005   	5160.45 		03-OCT-94      	2003      		1002
3006   	1098.16 		04-OCT-94      	2008      		1007
3009   	1713.23 		04-OCT-94      	2002      		1003
3007    75.75 		  05-OCT-94      	2004      		1002
3008    4723.00		  05-OCT-94      	2006      		1001
3010   	1309.95 		06-OCT-94      	2004      		1002
3011   	9891.88 		06-OCT-94      	2006      		1001


               QUERIES                       
1.	Display snum,sname,city and comm of all salespeople.

SELECT snum, sname, city, comm
FROM salespeople;

2.	Display all snum without duplicates from all orders.

SELECT DISTINCT snum
FROM orders;

3.	Display names and commissions of all salespeople in london.

SELECT sname, comm
FROM salespeople
WHERE city = 'London';

4.	All customers with rating of 100.

SELECT cname
FROM cust
WHERE rating = 100;

5.	Produce orderno, amount and date form all rows in the order table.

SELECT onum, amt, odate
FROM orders;

6.	All customers in San Jose, who have rating more than 200.

SELECT cname
FROM cust
WHERE city = 'San Jose' AND rating > 200;

7.	All customers who were either located in San Jose or had a rating above 200.

SELECT cname
FROM cust
WHERE city = 'San Jose' OR rating > 200;

8.	All orders for more than $1000.

SELECT *
FROM orders
WHERE amt > 1000;

9.	Names and citires of all salespeople in london with commission above 0.10.

SELECT sname, city
FROM salespeople
WHERE city = 'London' AND comm > 0.10;

10.	All customers excluding those with rating <= 100 unless they are located in Rome.

SELECT cname
FROM cust
WHERE rating > 100 OR city = 'Rome';

11.	All salespeople either in Barcelona or in london.

SELECT sname, city
FROM salespeople
WHERE city IN ('Barcelona', 'London');

12.	All salespeople with commission between 0.10 and 0.12. (Boundary values should be excluded)

SELECT sname, comm
FROM salespeople
WHERE comm > 0.10 AND comm < 0.12;

13.	All customers with NULL values in city column.

SELECT cname
FROM cust
WHERE city IS NULL;

14.	All orders taken on Oct 3Rd   and Oct 4th  1994.

SELECT *
FROM orders
WHERE odate IN ('03-OCT-94', '04-OCT-94');

15.	All customers serviced by peel or Motika.

SELECT DISTINCT cname
FROM cust
WHERE snum IN (
  SELECT snum
  FROM salespeople
  WHERE sname IN ('Peel', 'Motika')
);

16.	All customers whose names begin with a letter from A to B.

SELECT cname
FROM cust
WHERE cname LIKE 'A%' OR cname LIKE 'B%';

17.	All orders except those with 0 or NULL value in amt field.

SELECT onum
FROM orders
WHERE amt IS NOT NULL AND amt != 0;

18.	Count the number of salespeople currently listing orders in the order table.

SELECT COUNT(DISTINCT snum)
FROM orders;

19.	Largest order taken by each salesperson, datewise.

SELECT odate, snum, MAX(amt) AS max_amt
FROM orders
GROUP BY odate, snum
ORDER BY odate, snum;

20.	Largest order taken by each salesperson with order value more than $3000.

SELECT odate, snum, MAX(amt) AS max_amt
FROM orders
WHERE amt > 3000
GROUP BY odate, snum
ORDER BY odate, snum;

21.	Which day had the hightest total amount ordered.

SELECT odate
FROM orders
GROUP BY odate
ORDER BY SUM(amt) DESC
FETCH FIRST 1 ROW ONLY;

22.	Count all orders for Oct 3rd.

SELECT COUNT(*)
FROM orders
WHERE odate = '03-OCT-94';

23.	Count the number of different non NULL city values in customers table.

SELECT COUNT(DISTINCT city)
FROM cust
WHERE city IS NOT NULL;

24.	Select each customer’s smallest order.

SELECT cnum, MIN(amt) AS smallest_order
FROM orders
GROUP BY cnum;

25.	First customer in alphabetical order whose name begins with G.

SELECT MIN(cname)
FROM cust
WHERE cname LIKE 'G%';

26.	Get the output like “ For dd/mm/yy there are ___ orders.

SELECT 'For ' || TO_CHAR(odate, 'DD/MM/YY') || ' there are ' || COUNT(*) || ' orders' AS result
FROM orders
GROUP BY odate;

27.	Assume that each salesperson has a 12% commission. Produce order no., salesperson no., and amount of salesperson’s commission for that order.

SELECT onum, snum, amt, amt * 0.12 AS commission
FROM orders
ORDER BY snum;

28.	Find highest rating in each city. Put the output in this form. For the city (city), the highest rating is : (rating).

SELECT 'For the city (' || city || '), the highest rating is : (' || MAX(rating) || ')' AS result
FROM cust
GROUP BY city;

29.	Display the totals of orders for each day and place the results in descending order.

SELECT odate, COUNT(onum) AS total_orders
FROM orders
GROUP BY odate
ORDER BY total_orders DESC;

30.	All combinations of salespeople and customers who shared a city. (ie same city).

SELECT sname, cname
FROM salespeople s
JOIN cust c ON s.city = c.city;

31.	Name of all customers matched with the salespeople serving them.

SELECT cname, sname
FROM cust
JOIN salespeople ON cust.snum = salespeople.snum;

32.	List each order number followed by the name of the customer who made the order.

SELECT onum, cname
FROM orders
JOIN cust ON orders.cnum = cust.cnum;

33.	Names of salesperson and customer for each order after the order number.

SELECT onum, sname, cname
FROM orders
JOIN cust ON orders.cnum = cust.cnum
JOIN salespeople ON orders.snum = salespeople.snum;

34.	Produce all customer serviced by salespeople with a commission above 12%.

SELECT cname, sname, comm
FROM cust
JOIN salespeople ON cust.snum = salespeople.snum
WHERE comm > 0.12;

35.	Calculate the amount of the salesperson’s commission on each order with a rating above 100.

SELECT sname, amt * comm AS commission
FROM orders
JOIN cust ON orders.cnum = cust.cnum
JOIN salespeople ON orders.snum = salespeople.snum
WHERE rating > 100;

36.	Find all pairs of customers having the same rating.

SELECT a.cname, b.cname, a.rating
FROM cust a, cust b
WHERE a.rating = b.rating AND a.cnum != b.cnum;

37.	Find all pairs of customers having the same rating, each pair coming once only.

SELECT a.cname, b.cname, a.rating
FROM cust a, cust b
WHERE a.rating = b.rating AND a.cnum < b.cnum;

38.	Policy is to assign three salesperson to each customers. Display all such combinations.

SELECT cname, sname
FROM cust
CROSS JOIN (
  SELECT sname
  FROM salespeople
  WHERE ROWNUM <= 3
) s
ORDER BY cname;

39.	Display all customers located in cities where salesman serres has customer.

SELECT cname
FROM cust
WHERE city IN (
  SELECT DISTINCT c1.city
  FROM cust c1
  JOIN salespeople s ON c1.snum = s.snum
  WHERE s.sname = 'Serres'
);

40.	Find all pairs of customers served by single salesperson.

SELECT a.cname, b.cname
FROM cust a, cust b
WHERE a.snum = b.snum AND a.cnum < b.cnum;
	
41.	Produce all pairs of salespeople which are living in the same city. Exclude combinations of salespeople with themselves as well as duplicates with the order reversed.

SELECT s1.snum, s2.snum
FROM salespeople s1
JOIN salespeople s2 ON s1.city = s2.city AND s1.snum < s2.snum;

42.	Produce all pairs of orders by given customer, names that customers and eliminates duplicates.

SELECT DISTINCT o1.onum, o2.onum
FROM orders o1
JOIN orders o2 ON o1.cnum = o2.cnum AND o1.onum < o2.onum;

43.	Produce names and cities of all customers with the same rating as Hoffman.

SELECT cname, city
FROM customers
WHERE rating = (SELECT rating FROM customers WHERE cname = 'Hoffman');

44.	Extract all the orders of Motika.

SELECT *
FROM orders
WHERE cnum = (SELECT cnum FROM customers WHERE cname = 'Motika');

45.	All orders credited to the same salesperson who services Hoffman.

SELECT *
FROM orders
WHERE snum = (SELECT snum FROM customers WHERE cname = 'Hoffman');

46.	All orders that are greater than the average for Oct 4.

SELECT *
FROM orders
WHERE amt > (
    SELECT AVG(amt)
    FROM orders
    WHERE odate = '2021-10-04'
);

47.	Find average commission of salespeople in london.

SELECT AVG(commission) AS avg_commission
FROM salespeople
WHERE city = 'London';

48.	Find all orders attributed to salespeople servicing customers in london.

SELECT o.*
FROM orders o
JOIN customers c ON o.cnum = c.cnum
WHERE c.city = 'London';

49.	Extract commissions of all salespeople servicing customers in London.

SELECT DISTINCT s.commission
FROM salespeople s
JOIN customers c ON s.snum = c.snum
WHERE c.city = 'London';

50.	Find all customers whose cnum is 1000 above the snum of serres.

SELECT *
FROM customers
WHERE cnum = (
    SELECT snum + 1000
    FROM salespeople
    WHERE sname = 'Serres'
);

51.	Count the customers with rating  above San Jose’s average.

SELECT COUNT(*)
FROM customers
WHERE rating > (
    SELECT AVG(rating)
    FROM customers
    WHERE city = 'San Jose'
);

52.	Obtain all orders for the customer named Cisnerous. (Assume you don’t know his customer no. (cnum)).

SELECT *
FROM orders
WHERE cnum = (
    SELECT cnum
    FROM customers
    WHERE cname = 'Cisnerous'
);

53.	Produce the names and rating of all customers who have above average orders.

SELECT c.cname, c.rating
FROM customers c
JOIN orders o ON c.cnum = o.cnum
GROUP BY c.cname, c.rating
HAVING AVG(o.amt) > (
    SELECT AVG(amt)
    FROM orders
);

54.	Find total amount in orders for each salesperson for whom this total is greater than the amount of the largest order in the table.

SELECT o.snum, SUM(o.amt) AS total_amt
FROM orders o
GROUP BY o.snum
HAVING SUM(o.amt) > (
    SELECT MAX(amt)
    FROM orders
);

55.	Find all customers with order on 3rd Oct.

SELECT *
FROM customers
WHERE cnum IN (
    SELECT cnum
    FROM orders
    WHERE odate = '2021-10-03'
);

56.	Find names and numbers of all salesperson who have more than one customer.

SELECT s.snum, s.sname
FROM salespeople s
JOIN customers c ON s.snum = c.snum
GROUP BY s.snum, s.sname
HAVING COUNT(*) > 1;

57.	Check if the correct salesperson was credited with each sale.

SELECT *
FROM orders o
WHERE NOT EXISTS (
    SELECT 1
    FROM customers c
    WHERE c.cnum = o.cnum AND c.snum = o.snum
);

58.	Find all orders with above average amounts for their customers.

SELECT *
FROM orders o
WHERE amt > (
    SELECT AVG(amt)
    FROM orders
    WHERE cnum = o.cnum
);

59.	Find the sums of the amounts from order table grouped by date, eliminating all those dates where the sum was not at least 2000 above the maximum amount.

SELECT odate, SUM(amt) AS total_amt
FROM orders
GROUP BY odate
HAVING SUM(amt) >= (
    SELECT MAX(amt)
    FROM orders
) + 2000;

60.	Find names and numbers of all customers with ratings equal to the maximum for their city.

SELECT c.cname, c.cnum
FROM customers c
WHERE rating = (
    SELECT MAX(rating)
    FROM customers
    WHERE city = c.city
);

61.	Find all salespeople who have customers in their cities who they don’t service. ( Both way using Join and Correlated subquery.)

(Join)
SELECT DISTINCT s.snum
FROM salespeople s
JOIN customers c ON s.city = c.city
WHERE s.snum <> c.snum;

 (Correlated)
SELECT s.snum
FROM salespeople s
WHERE EXISTS (
    SELECT 1
    FROM customers c
    WHERE c.city = s.city AND c.snum <> s.snum
);`

62.	Extract cnum,cname and city from customer table if and only if one or more of the customers in the table are located in San Jose.

SELECT cnum, cname, city
FROM customers
WHERE EXISTS (
    SELECT 1
    FROM customers
    WHERE city = 'San Jose'
);

63.	Find salespeople no. who have multiple customers.

SELECT snum
FROM customers
GROUP BY snum
HAVING COUNT(*) > 1;

64.	Find salespeople number, name and city who have multiple customers.

SELECT s.snum, s.sname, s.city
FROM salespeople s
WHERE s.snum IN (
    SELECT snum
    FROM customers
    GROUP BY snum
    HAVING COUNT(*) > 1
);

65.	Find salespeople who serve only one customer.

SELECT s.snum, s.sname
FROM salespeople s
WHERE s.snum IN (
    SELECT snum
    FROM customers
    GROUP BY snum
    HAVING COUNT(*) = 1
);

66.	Extract rows of all salespeople with more than one current order.

SELECT s.*
FROM salespeople s
WHERE (
    SELECT COUNT(*)
    FROM orders
    WHERE snum = s.snum
) > 1;

67.	Find all salespeople who have customers with a rating of 300. (use EXISTS)

SELECT *
FROM salespeople s
WHERE EXISTS (
    SELECT 1
    FROM customers c
    WHERE c.rating = 300 AND c.snum = s.snum
);

68.	Find all salespeople who have customers with a rating of 300. (use Join).

SELECT DISTINCT s.*
FROM salespeople s
JOIN customers c ON s.snum = c.snum
WHERE c.rating = 300;

69.	Select all salespeople with customers located in their cities who are not assigned to them. (use EXISTS).

SELECT *
FROM salespeople s
WHERE EXISTS (
    SELECT 1
    FROM customers c
    WHERE s.city = c.city AND s.snum <> c.snum
);

70.	Extract from customers table every customer assigned the a salesperson who currently has at least one other customer ( besides the customer being selected) with orders in order table.

SELECT *
FROM customers c1
WHERE EXISTS (
    SELECT 1
    FROM customers c2
    WHERE c1.snum = c2.snum AND c1.cnum <> c2.cnum
    AND EXISTS (
        SELECT 1
        FROM orders o
        WHERE o.cnum = c2.cnum
    )
);

71.	Find salespeople with customers located in their cities ( using both ANY and IN).
(ANY)

SELECT *
FROM salespeople
WHERE city = ANY (
    SELECT city
    FROM customers
);

(IN)
SELECT *
FROM salespeople
WHERE city IN (
    SELECT city
    FROM customers
);

72.	Find all salespeople for whom there are customers that follow them in alphabetical order. (Using ANY and EXISTS)

SELECT *
FROM salespeople s
WHERE EXISTS (
    SELECT 1
    FROM customers c
    WHERE c.cname > s.sname
);

73.	Select customers who have a greater rating than any customer in rome.

SELECT *
FROM customers
WHERE rating > ANY (
    SELECT rating
    FROM customers
    WHERE city = 'Rome'
);

74.	Select all orders that had amounts that were greater that atleast one of the orders from Oct 6th.

SELECT *
FROM orders
WHERE amt > ANY (
    SELECT amt
    FROM orders
    WHERE odate = '2021-10-06'
);

75.	Find all orders with amounts smaller than any amount for a customer in San Jose. (Both using ANY and without ANY)

SELECT *
FROM orders
WHERE amt < ANY (
    SELECT amt
    FROM orders
    WHERE cnum IN (
        SELECT cnum
        FROM customers
        WHERE city = 'San Jose'
    )
);

76.	Select those customers whose ratings are higher than every customer in Paris. ( Using both ALL and NOT EXISTS).

SELECT *
FROM customers c1
WHERE rating > ALL (
    SELECT rating
    FROM customers
    WHERE city = 'Paris'
);

(NOT EXISTS)
SELECT *
FROM customers c1
WHERE NOT EXISTS (
    SELECT 1
    FROM customers c2
    WHERE c2.city = 'Paris' AND c2.rating >= c1.rating
);

77.	Select all customers whose ratings are equal to or greater than ANY of the Seeres.

SELECT *
FROM customers
WHERE rating >= ANY (
    SELECT rating
    FROM customers
    WHERE cname = 'Seeres'
);

78.	Find all salespeople who have no customers located in their city. ( Both using ANY and ALL)

(ANY)
SELECT *
FROM salespeople s
WHERE city <> ANY (
    SELECT city
    FROM customers
    WHERE s.snum = customers.snum
);

(ALL)
SELECT *
FROM salespeople s
WHERE NOT EXISTS (
    SELECT 1
    FROM customers c
    WHERE s.city = c.city AND s.snum = c.snum
);

79.	Find all orders for amounts greater than any for the customers in London.

SELECT *
FROM orders
WHERE amt > ANY (
    SELECT amt
    FROM orders o
    JOIN customers c ON o.cnum = c.cnum
    WHERE c.city = 'London'
);

80.	Find all salespeople and customers located in london.

SELECT s.sname, s.city, c.cname, c.city
FROM salespeople s
JOIN customers c ON s.city = c.city
WHERE s.city = 'London';

81.	For every salesperson, dates on which highest and lowest orders were brought.

SELECT snum,
       MAX(odate) AS highest_order_date,
       MIN(odate) AS lowest_order_date
FROM orders
GROUP BY snum;

82.	List all of the salespeople and indicate those who don’t have customers in their cities as well as those who do have.

SELECT s.*, 
       CASE WHEN EXISTS (
            SELECT 1 FROM customers c WHERE c.city = s.city
       ) THEN 'Has Customers in City' ELSE 'No Customers in City' END AS status
FROM salespeople s;

83.	Append strings to the selected fields, indicating weather or not a given salesperson was matched to a customer in his city.

SELECT s.sname || ' - ' ||
       CASE WHEN EXISTS (
           SELECT 1 FROM customers c WHERE c.snum = s.snum AND c.city = s.city
       ) THEN 'Matched' ELSE 'Not Matched' END AS info
FROM salespeople s;

84.	Create a union of two queries that shows the names, cities and ratings of all customers. Those with a rating of 200 or greater will also have the words ‘High Rating’, while the others will have the words ‘Low Rating’.

SELECT cname, city, rating, 'High Rating' AS status
FROM customers
WHERE rating >= 200
UNION
SELECT cname, city, rating, 'Low Rating' AS status
FROM customers
WHERE rating < 200;

85.	Write command that produces the name and number of each salesperson and each customer with more than one current order. Put the result in alphabetical order.

SELECT s.sname, s.snum
FROM salespeople s
WHERE s.snum IN (
    SELECT snum FROM orders GROUP BY snum HAVING COUNT(*) > 1
)
UNION
SELECT c.cname, c.cnum
FROM customers c
WHERE c.cnum IN (
    SELECT cnum FROM orders GROUP BY cnum HAVING COUNT(*) > 1
)
ORDER BY 1;

86.	Form a union of three queries. Have the first select the snums of all salespeople in San Jose, then second the cnums of all customers in San Jose and the third the onums of all orders on Oct. 3. Retain duplicates between the last two queries, but eliminates and redundancies between either of them and the first.

SELECT snum
FROM salespeople
WHERE city = 'San Jose'
UNION
SELECT cnum
FROM customers
WHERE city = 'San Jose'
UNION ALL
SELECT onum
FROM orders
WHERE odate = '2021-10-03';

87.	Produce all the salesperson in London who had at least one customer there.

SELECT *
FROM salespeople s
WHERE city = 'London'
AND EXISTS (
    SELECT 1 FROM customers c WHERE c.city = 'London' AND c.snum = s.snum
);

88.	Produce all the salesperson in London who did not have customers there.

SELECT *
FROM salespeople s
WHERE city = 'London'
AND NOT EXISTS (
    SELECT 1 FROM customers c WHERE c.city = 'London' AND c.snum = s.snum
);

89.	We want to see salespeople matched to their customers without excluding those salesperson who were not currently assigned to any customers. (User OUTER join and UNION)

SELECT s.snum, s.sname, c.cnum, c.cname
FROM salespeople s
LEFT JOIN customers c ON s.snum = c.snum
UNION
SELECT s.snum, s.sname, NULL, NULL
FROM salespeople s
WHERE s.snum NOT IN (
    SELECT DISTINCT snum FROM customers
);
