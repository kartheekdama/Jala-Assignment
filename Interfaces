1. Create an interface with only one method and implement it in a class. Call the method implemented. 

interface A {
    void methodA();
}

class ImplA implements A {
    public void methodA() {
        System.out.println("methodA called");
    }
}

class Demo1 {
    public static void main(String[] args) {
        ImplA obj = new ImplA();
        obj.methodA();
    }
}

 
2. Create an interface with two methods, but implement only one in a class. Call the method implemented. 

interface B {
    void methodB1();
    void methodB2();
}

abstract class ImplB implements B {
    public void methodB1() {
        System.out.println("methodB1 implemented");
    }
}

class ConcreteB extends ImplB {
    public void methodB2() {
        System.out.println("methodB2 implemented");
    }
}

class Demo2 {
    public static void main(String[] args) {
        ConcreteB obj = new ConcreteB();
        obj.methodB1();
        obj.methodB2();
    }
}

 
3. Use Interface instances to call the implemented method in the implemented class 

interface C {
    void methodC();
}

class ImplC implements C {
    public void methodC() {
        System.out.println("methodC called");
    }
}

class Demo3 {
    public static void main(String[] args) {
        C obj = new ImplC();  // Interface reference
        obj.methodC();
    }
}

 
4. Create two interfaces with one method each. Implement these two interfaces in one class.  

interface D1 {
    void methodD1();
}

interface D2 {
    void methodD2();
}

class ImplD implements D1, D2 {
    public void methodD1() {
        System.out.println("methodD1 called");
    }
    public void methodD2() {
        System.out.println("methodD2 called");
    }
}

class Demo4 {
    public static void main(String[] args) {
        ImplD obj = new ImplD();
        obj.methodD1();
        obj.methodD2();
    }
}

 
5. Create two interfaces with the same method (same signature) in both the interfaces. Implement these two interfaces in one class. Call the method. 

interface E1 {
    void commonMethod();
}

interface E2 {
    void commonMethod();
}

class ImplE implements E1, E2 {
    public void commonMethod() {
        System.out.println("commonMethod implemented once");
    }
}

class Demo5 {
    public static void main(String[] args) {
        ImplE obj = new ImplE();
        obj.commonMethod();
    }
}

 
6. Create an interface with a default method and implement it in a class. Do not provide implementation to the default method and call the method. 

interface F {
    default void defaultMethod() {
        System.out.println("default method in interface");
    }
}

class ImplF implements F {
}

class Demo6 {
    public static void main(String[] args) {
        ImplF obj = new ImplF();
        obj.defaultMethod();
    }
}

 
7. Create an interface and inherit it from the other interface. 

interface G1 {
    void methodG1();
}

interface G2 extends G1 {
    void methodG2();
}

class ImplG implements G2 {
    public void methodG1() {
        System.out.println("methodG1 implemented");
    }
    public void methodG2() {
        System.out.println("methodG2 implemented");
    }
}

class Demo7 {
    public static void main(String[] args) {
        ImplG obj = new ImplG();
        obj.methodG1();
        obj.methodG2();
    }
}

8. Create a PUBLIC interface with fields and methods, fields should have values assigned. Implement this interface to some class and print the values of the interface fields  and call the interface methods 

public interface H {
    int x = 10;              // public static final by default
    String message = "Hello";

    void printMessage();
}

class ImplH implements H {
    public void printMessage() {
        System.out.println("Message: " + message);
    }
}

class Demo8 {
    public static void main(String[] args) {
        ImplH obj = new ImplH();
        System.out.println("x = " + H.x);
        obj.printMessage();
    }
}

 
9. Create a PRIVATE or PROTECTED interface and print the values as above scenario 

class Outer {
    private interface PrivateInterface {
        void show();
    }

    private static class Impl implements PrivateInterface {
        public void show() {
            System.out.println("Private interface method");
        }
    }

    public static void demo() {
        PrivateInterface obj = new Impl();
        obj.show();
    }
}

class Demo9 {
    public static void main(String[] args) {
        Outer.demo();
    }
}

 
10. Create an interface with private, public and protected fields.

Java interfaces cannot have protected or private fields 
interface I {
    int publicField = 1;  // implicitly public static final

    // private fields not allowed in interfaces
    // protected fields not allowed
}

 
11. Create an interface with static final variable

interface J {
    static final int CONSTANT = 100;
    void showConstant();
}

class ImplJ implements J {
    public void showConstant() {
        System.out.println("Constant: " + CONSTANT);
    }
}

class Demo11 {
    public static void main(String[] args) {
        ImplJ obj = new ImplJ();
        obj.showConstant();
    }
}
